<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="16" passed="15">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="21248" started-at="2020-05-06T20:30:35 IST" finished-at="2020-05-06T20:30:56 IST">
    <groups>
    </groups>
    <test name="Test" duration-ms="21248" started-at="2020-05-06T20:30:35 IST" finished-at="2020-05-06T20:30:56 IST">
      <class name="com.API_Testing.TestScripts.TC_03_PUTRequest">
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestScripts.TC_03_PUTRequest@5faeada1]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="1" started-at="2020-05-06T20:30:38 IST" finished-at="2020-05-06T20:30:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestScripts.TC_03_PUTRequest@5faeada1]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-06T20:30:38 IST" finished-at="2020-05-06T20:30:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="createData()[pri:0, instance:com.API_Testing.TestScripts.TC_03_PUTRequest@5faeada1]" name="createData" duration-ms="49" started-at="2020-05-06T20:30:38 IST" finished-at="2020-05-06T20:30:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestScripts.TC_03_PUTRequest@5faeada1]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-06T20:30:38 IST" finished-at="2020-05-06T20:30:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestScripts.TC_03_PUTRequest@5faeada1]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="1" started-at="2020-05-06T20:30:38 IST" finished-at="2020-05-06T20:30:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="updateRecord()[pri:0, instance:com.API_Testing.TestScripts.TC_03_PUTRequest@5faeada1]" name="updateRecord" duration-ms="52" started-at="2020-05-06T20:30:38 IST" finished-at="2020-05-06T20:30:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRecord -->
      </class> <!-- com.API_Testing.TestScripts.TC_03_PUTRequest -->
      <class name="com.API_Testing.TestScripts.TC_07_ReplaceDynamicjSonVarialbles">
        <test-method status="PASS" signature="replaceVarialbes()[pri:0, instance:com.API_Testing.TestScripts.TC_07_ReplaceDynamicjSonVarialbles@528931cf]" name="replaceVarialbes" duration-ms="14438" started-at="2020-05-06T20:30:38 IST" finished-at="2020-05-06T20:30:52 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- replaceVarialbes -->
      </class> <!-- com.API_Testing.TestScripts.TC_07_ReplaceDynamicjSonVarialbles -->
      <class name="com.API_Testing.TestScripts.TC_06_GetALLData">
        <test-method status="PASS" signature="getAllRecords()[pri:0, instance:com.API_Testing.TestScripts.TC_06_GetALLData@ea1a8d5]" name="getAllRecords" duration-ms="47" started-at="2020-05-06T20:30:52 IST" finished-at="2020-05-06T20:30:52 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllRecords -->
      </class> <!-- com.API_Testing.TestScripts.TC_06_GetALLData -->
      <class name="com.API_Testing.TestScripts.TC_12_CheckGitHubServer">
        <test-method status="PASS" signature="generateRecordOnGitServer()[pri:0, instance:com.API_Testing.TestScripts.TC_12_CheckGitHubServer@1563da5]" name="generateRecordOnGitServer" duration-ms="3436" started-at="2020-05-06T20:30:52 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRecordOnGitServer -->
        <test-method status="PASS" signature="dataForGenerate()[pri:0, instance:com.API_Testing.TestScripts.TC_12_CheckGitHubServer@1563da5]" name="dataForGenerate" is-config="true" duration-ms="0" started-at="2020-05-06T20:30:52 IST" finished-at="2020-05-06T20:30:52 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForGenerate -->
      </class> <!-- com.API_Testing.TestScripts.TC_12_CheckGitHubServer -->
      <class name="com.API_Testing.TestScripts.TC_02_GetPerticulerIddata">
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestScripts.TC_02_GetPerticulerIddata@2bbf4b8b]" name="jsonBody" is-config="true" duration-ms="1" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="createData()[pri:0, instance:com.API_Testing.TestScripts.TC_02_GetPerticulerIddata@2bbf4b8b]" name="createData" duration-ms="42" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestScripts.TC_02_GetPerticulerIddata@2bbf4b8b]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="getIDData()[pri:0, instance:com.API_Testing.TestScripts.TC_02_GetPerticulerIddata@2bbf4b8b]" name="getIDData" duration-ms="40" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getIDData -->
      </class> <!-- com.API_Testing.TestScripts.TC_02_GetPerticulerIddata -->
      <class name="com.API_Testing.TestScripts.TC_08_GetDatabyKey">
        <test-method status="PASS" signature="fetchValuedata()[pri:0, instance:com.API_Testing.TestScripts.TC_08_GetDatabyKey@7a1ebcd8]" name="fetchValuedata" duration-ms="4" started-at="2020-05-06T20:30:38 IST" finished-at="2020-05-06T20:30:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchValuedata -->
      </class> <!-- com.API_Testing.TestScripts.TC_08_GetDatabyKey -->
      <class name="com.API_Testing.TestScripts.TC_11_AddValueInExsitingData">
        <test-method status="PASS" signature="addValueExsitingData()[pri:0, instance:com.API_Testing.TestScripts.TC_11_AddValueInExsitingData@458c1321]" name="addValueExsitingData" duration-ms="25" started-at="2020-05-06T20:30:35 IST" finished-at="2020-05-06T20:30:35 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addValueExsitingData -->
      </class> <!-- com.API_Testing.TestScripts.TC_11_AddValueInExsitingData -->
      <class name="com.API_Testing.TestScripts.TC_01_PostMethods">
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestScripts.TC_01_PostMethods@11438d26]" name="jsonBody" is-config="true" duration-ms="1" started-at="2020-05-06T20:30:35 IST" finished-at="2020-05-06T20:30:35 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="createData()[pri:0, instance:com.API_Testing.TestScripts.TC_01_PostMethods@11438d26]" name="createData" duration-ms="2770" started-at="2020-05-06T20:30:35 IST" finished-at="2020-05-06T20:30:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createData -->
      </class> <!-- com.API_Testing.TestScripts.TC_01_PostMethods -->
      <class name="com.API_Testing.TestScripts.TC_10_PostDataUsingPojo">
        <test-method status="PASS" signature="createPojoBody()[pri:0, instance:com.API_Testing.TestScripts.TC_10_PostDataUsingPojo@34cd072c]" name="createPojoBody" is-config="true" duration-ms="2" started-at="2020-05-06T20:30:38 IST" finished-at="2020-05-06T20:30:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createPojoBody -->
        <test-method status="PASS" signature="pojoPostTest()[pri:0, instance:com.API_Testing.TestScripts.TC_10_PostDataUsingPojo@34cd072c]" name="pojoPostTest" duration-ms="28" started-at="2020-05-06T20:30:38 IST" finished-at="2020-05-06T20:30:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pojoPostTest -->
      </class> <!-- com.API_Testing.TestScripts.TC_10_PostDataUsingPojo -->
      <class name="com.API_Testing.TestScripts.TC_09CompareJSonTwoFile">
        <test-method status="PASS" signature="comparetoJson()[pri:0, instance:com.API_Testing.TestScripts.TC_09CompareJSonTwoFile@34c4973]" name="comparetoJson" duration-ms="15" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- comparetoJson -->
      </class> <!-- com.API_Testing.TestScripts.TC_09CompareJSonTwoFile -->
      <class name="com.API_Testing.TestScripts.TC_05_DeleteRequestData">
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestScripts.TC_05_DeleteRequestData@30a3107a]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="createData()[pri:0, instance:com.API_Testing.TestScripts.TC_05_DeleteRequestData@30a3107a]" name="createData" duration-ms="44" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestScripts.TC_05_DeleteRequestData@30a3107a]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="deleteData()[pri:0, instance:com.API_Testing.TestScripts.TC_05_DeleteRequestData@30a3107a]" name="deleteData" duration-ms="29" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteData -->
      </class> <!-- com.API_Testing.TestScripts.TC_05_DeleteRequestData -->
      <class name="com.API_Testing.TestScripts.TC_04_PatchRequest">
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestScripts.TC_04_PatchRequest@33c7e1bb]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestScripts.TC_04_PatchRequest@33c7e1bb]" name="dataForUpdate" is-config="true" duration-ms="1" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
        <test-method status="PASS" signature="createData()[pri:0, instance:com.API_Testing.TestScripts.TC_04_PatchRequest@33c7e1bb]" name="createData" duration-ms="41" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestScripts.TC_04_PatchRequest@33c7e1bb]" name="jsonBody" is-config="true" duration-ms="1" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestScripts.TC_04_PatchRequest@33c7e1bb]" name="dataForUpdate" is-config="true" duration-ms="0" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
        <test-method status="FAIL" signature="updateSpecificData()[pri:0, instance:com.API_Testing.TestScripts.TC_04_PatchRequest@33c7e1bb]" name="updateSpecificData" duration-ms="53" started-at="2020-05-06T20:30:56 IST" finished-at="2020-05-06T20:30:56 IST">
          <exception class="java.net.SocketException">
            <message>
              <![CDATA[Connection reset]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.net.SocketException: Connection reset
at java.net.SocketInputStream.read(Unknown Source)
at java.net.SocketInputStream.read(Unknown Source)
at org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:158)
at org.apache.http.impl.io.SocketInputBuffer.fillBuffer(SocketInputBuffer.java:82)
at org.apache.http.impl.io.AbstractSessionInputBuffer.readLine(AbstractSessionInputBuffer.java:271)
at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:138)
at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56)
at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259)
at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:281)
at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:257)
at org.apache.http.impl.conn.ManagedClientConnectionImpl.receiveResponseHeader(ManagedClientConnectionImpl.java:207)
at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273)
at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)
at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:684)
at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:486)
at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
at org.apache.http.client.HttpClient$execute$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at org.apache.http.client.HttpClient$execute$0.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2055)
at io.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)
at io.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)
at io.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1450)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:821)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1199)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:821)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:151)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1655)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:821)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:184)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1661)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:821)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:156)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:184)
at io.restassured.internal.RequestSpecificationImpl.patch(RequestSpecificationImpl.groovy:191)
at io.restassured.internal.RequestSpecificationImpl.patch(RequestSpecificationImpl.groovy)
at com.API_Testing.TestStep_HTTP_Methods.HTTP_Methods.patch_UpdateData(HTTP_Methods.java:89)
at com.API_Testing.TestScripts.TC_04_PatchRequest.updateSpecificData(TC_04_PatchRequest.java:35)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:821)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:767)
at org.testng.TestRunner.run(TestRunner.java:588)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1214)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1136)
at org.testng.TestNG.runSuites(TestNG.java:1066)
at org.testng.TestNG.run(TestNG.java:1034)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.net.SocketException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateSpecificData -->
      </class> <!-- com.API_Testing.TestScripts.TC_04_PatchRequest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
