<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="22" passed="21">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="97422" started-at="2020-05-08T17:22:52 IST" finished-at="2020-05-08T17:24:29 IST">
    <groups>
    </groups>
    <test name="Test" duration-ms="97422" started-at="2020-05-08T17:22:52 IST" finished-at="2020-05-08T17:24:29 IST">
      <class name="com.API_Testing.TestCasesScripts.TC_12_CheckGitHubServer">
        <test-method status="PASS" signature="dataForGenerate()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_12_CheckGitHubServer@17d677df]" name="dataForGenerate" is-config="true" duration-ms="0" started-at="2020-05-08T17:23:05 IST" finished-at="2020-05-08T17:23:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForGenerate -->
        <test-method status="FAIL" signature="generateRecordOnGitServer()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_12_CheckGitHubServer@17d677df]" name="generateRecordOnGitServer" duration-ms="84041" started-at="2020-05-08T17:23:05 IST" finished-at="2020-05-08T17:24:29 IST">
          <exception class="java.net.ConnectException">
            <message>
              <![CDATA[Connection timed out: connect]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.net.ConnectException: Connection timed out: connect
at java.net.DualStackPlainSocketImpl.connect0(Native Method)
at java.net.DualStackPlainSocketImpl.socketConnect(Unknown Source)
at java.net.AbstractPlainSocketImpl.doConnect(Unknown Source)
at java.net.AbstractPlainSocketImpl.connectToAddress(Unknown Source)
at java.net.AbstractPlainSocketImpl.connect(Unknown Source)
at java.net.PlainSocketImpl.connect(Unknown Source)
at java.net.SocksSocketImpl.connect(Unknown Source)
at java.net.Socket.connect(Unknown Source)
at org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:542)
at org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:414)
at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)
at org.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)
at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)
at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)
at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
at org.apache.http.client.HttpClient$execute$0.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2055)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:349)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1180)
at sun.reflect.GeneratedMethodAccessor73.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:821)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:151)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1655)
at sun.reflect.GeneratedMethodAccessor66.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:821)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:184)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1661)
at sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:821)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:184)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:175)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.API_Testing.TestCasesScripts.TC_12_CheckGitHubServer.generateRecordOnGitServer(TC_12_CheckGitHubServer.java:41)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:821)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:767)
at org.testng.TestRunner.run(TestRunner.java:588)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1214)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1136)
at org.testng.TestNG.runSuites(TestNG.java:1066)
at org.testng.TestNG.run(TestNG.java:1034)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.net.ConnectException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRecordOnGitServer -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_12_CheckGitHubServer -->
      <class name="com.API_Testing.TestCasesScripts.TC_04_PatchRequest">
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="jsonBody" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="dataForUpdate" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="createData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="createData" duration-ms="32" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="dataForUpdate" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
        <test-method status="PASS" signature="getIDData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="getIDData" duration-ms="23" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getIDData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="dataForUpdate" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="updateRecord()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="updateRecord" duration-ms="26" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRecord -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="updateSpecificData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="updateSpecificData" duration-ms="27" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateSpecificData -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_04_PatchRequest@1563da5]" name="dataForUpdate" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_04_PatchRequest -->
      <class name="com.API_Testing.TestCasesScripts.TC_07_ReplaceDynamicjSonVarialbles">
        <test-method status="PASS" signature="replaceVarialbes()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_07_ReplaceDynamicjSonVarialbles@33c7e1bb]" name="replaceVarialbes" duration-ms="9533" started-at="2020-05-08T17:22:56 IST" finished-at="2020-05-08T17:23:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- replaceVarialbes -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_07_ReplaceDynamicjSonVarialbles -->
      <class name="com.API_Testing.TestCasesScripts.TC_10_PostDataUsingPojo">
        <test-method status="PASS" signature="createPojoBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_10_PostDataUsingPojo@7a765367]" name="createPojoBody" is-config="true" duration-ms="1" started-at="2020-05-08T17:23:05 IST" finished-at="2020-05-08T17:23:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createPojoBody -->
        <test-method status="PASS" signature="pojoPostTest()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_10_PostDataUsingPojo@7a765367]" name="pojoPostTest" duration-ms="24" started-at="2020-05-08T17:23:05 IST" finished-at="2020-05-08T17:23:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pojoPostTest -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_10_PostDataUsingPojo -->
      <class name="com.API_Testing.TestCasesScripts.TC_11_AddValueInExsitingData">
        <test-method status="PASS" signature="addValueExsitingData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_11_AddValueInExsitingData@76b0bfab]" name="addValueExsitingData" duration-ms="4" started-at="2020-05-08T17:23:05 IST" finished-at="2020-05-08T17:23:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addValueExsitingData -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_11_AddValueInExsitingData -->
      <class name="com.API_Testing.TestCasesScripts.TC_08_GetDatabyKey">
        <test-method status="PASS" signature="fetchValuedata()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_08_GetDatabyKey@34c4973]" name="fetchValuedata" duration-ms="5" started-at="2020-05-08T17:23:05 IST" finished-at="2020-05-08T17:23:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchValuedata -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_08_GetDatabyKey -->
      <class name="com.API_Testing.TestCasesScripts.TC_03_PUTRequest">
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_03_PUTRequest@ea1a8d5]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_03_PUTRequest@ea1a8d5]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="createData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_03_PUTRequest@ea1a8d5]" name="createData" duration-ms="49" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_03_PUTRequest@ea1a8d5]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_03_PUTRequest@ea1a8d5]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="getIDData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_03_PUTRequest@ea1a8d5]" name="getIDData" duration-ms="31" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getIDData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_03_PUTRequest@ea1a8d5]" name="jsonBody" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="updateRecord()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_03_PUTRequest@ea1a8d5]" name="updateRecord" duration-ms="30" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRecord -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_03_PUTRequest@ea1a8d5]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_03_PUTRequest -->
      <class name="com.API_Testing.TestCasesScripts.TC_09CompareJSonTwoFile">
        <test-method status="PASS" signature="comparetoJson()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_09CompareJSonTwoFile@52feb982]" name="comparetoJson" duration-ms="13" started-at="2020-05-08T17:23:05 IST" finished-at="2020-05-08T17:23:05 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- comparetoJson -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_09CompareJSonTwoFile -->
      <class name="com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData">
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="dataForUpdate" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
        <test-method status="PASS" signature="createData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="createData" duration-ms="38" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createData -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="dataForUpdate" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
        <test-method status="PASS" signature="getIDData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="getIDData" duration-ms="18" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getIDData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="updateRecord()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="updateRecord" duration-ms="41" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRecord -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="dataForUpdate" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:56 IST" finished-at="2020-05-08T17:22:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:56 IST" finished-at="2020-05-08T17:22:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="dataForUpdate" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:56 IST" finished-at="2020-05-08T17:22:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
        <test-method status="PASS" signature="updateSpecificData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="updateSpecificData" duration-ms="20" started-at="2020-05-08T17:22:56 IST" finished-at="2020-05-08T17:22:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateSpecificData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="jsonBody" is-config="true" duration-ms="1" started-at="2020-05-08T17:22:56 IST" finished-at="2020-05-08T17:22:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="deleteData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="deleteData" duration-ms="22" started-at="2020-05-08T17:22:56 IST" finished-at="2020-05-08T17:22:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteData -->
        <test-method status="PASS" signature="dataForUpdateExisitingRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="dataForUpdateExisitingRecords" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:56 IST" finished-at="2020-05-08T17:22:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdateExisitingRecords -->
        <test-method status="PASS" signature="dataForUpdate()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData@2bbf4b8b]" name="dataForUpdate" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:56 IST" finished-at="2020-05-08T17:22:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataForUpdate -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_05_DeleteRequestData -->
      <class name="com.API_Testing.TestCasesScripts.TC_06_GetALLData">
        <test-method status="PASS" signature="getAllRecords()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_06_GetALLData@30a3107a]" name="getAllRecords" duration-ms="49" started-at="2020-05-08T17:22:56 IST" finished-at="2020-05-08T17:22:56 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllRecords -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_06_GetALLData -->
      <class name="com.API_Testing.TestCasesScripts.TC_01_PostMethods">
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_01_PostMethods@5faeada1]" name="jsonBody" is-config="true" duration-ms="13" started-at="2020-05-08T17:22:52 IST" finished-at="2020-05-08T17:22:52 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="createData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_01_PostMethods@5faeada1]" name="createData" duration-ms="3069" started-at="2020-05-08T17:22:52 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createData -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_01_PostMethods -->
      <class name="com.API_Testing.TestCasesScripts.TC_02_GetPerticulerIddata">
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_02_GetPerticulerIddata@528931cf]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
        <test-method status="PASS" signature="createData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_02_GetPerticulerIddata@528931cf]" name="createData" duration-ms="53" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createData -->
        <test-method status="PASS" signature="getIDData()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_02_GetPerticulerIddata@528931cf]" name="getIDData" duration-ms="105" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getIDData -->
        <test-method status="PASS" signature="jsonBody()[pri:0, instance:com.API_Testing.TestCasesScripts.TC_02_GetPerticulerIddata@528931cf]" name="jsonBody" is-config="true" duration-ms="0" started-at="2020-05-08T17:22:55 IST" finished-at="2020-05-08T17:22:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jsonBody -->
      </class> <!-- com.API_Testing.TestCasesScripts.TC_02_GetPerticulerIddata -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
